<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ServiceStack.Razor</name>
    </assembly>
    <members>
        <member name="T:ServiceStack.Razor.Compilation.CompilerServices">
            <summary>
            Provides service methods for compilation.
            </summary>
        </member>
        <member name="M:ServiceStack.Razor.Compilation.CompilerServices.IsAnonymousType(System.Type)">
            <summary>
            Determines if the specified type is an anonymous type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is an anonymous type, otherwise false.</returns>
        </member>
        <member name="M:ServiceStack.Razor.Compilation.CompilerServices.IsDynamicType(System.Type)">
            <summary>
            Determines if the specified type is a dynamic type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is an anonymous type, otherwise false.</returns>
        </member>
        <member name="M:ServiceStack.Razor.Compilation.CompilerServices.GetConstructors(System.Type)">
            <summary>
            Gets the public or protected constructors of the specified type.
            </summary>
            <param name="type">The target type.</param>
            <returns>An enumerable of constructors.</returns>
        </member>
        <member name="M:ServiceStack.Razor.Compilation.CompilerServices.GetLoadedAssemblies">
            <summary>
            Gets an enumerable of all assemblies loaded in the current domain.
            </summary>
            <returns>An enumerable of loaded assemblies.</returns>
        </member>
        <member name="F:ServiceStack.Razor.Managers.FileSystemWatcherLiveReload.FileSystemWatcher">
            <summary>
            The purpose of the FileSystemWatcher is to ensure razor pages are
            consistent with the code generated by the razor engine. The file
            system watcher will invalidate pages and queue them for recompilation.
            </summary>
        </member>
        <member name="M:ServiceStack.Razor.Managers.FileSystemWatcherLiveReload.FileSystemWatcher_Error(System.Object,System.IO.ErrorEventArgs)">
            <summary>
            Avoid throwing unhandled exception when shutting down ASP.NET host
            </summary>
        </member>
        <member name="M:ServiceStack.Razor.Compilation.DirectivesParser.TryFindGlobalDirectivesFile(System.String,System.String,System.String@)">
            <summary>
            Attempts to locate the nearest global directive file by 
            </summary>
        </member>
        <member name="T:ServiceStack.Razor.Managers.RazorPageResolver">
            <summary>
            A common hook into ServiceStack and the hosting infrastructure used to resolve requests.
            </summary>
        </member>
        <member name="M:ServiceStack.Razor.Managers.RazorPageResolver.ProcessRequest(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.String)">
            <summary>
            This is called by the hosting environment via CatchAll usually for content pages.
            </summary>
        </member>
        <member name="M:ServiceStack.Razor.Managers.RazorPageResolver.ProcessRequest(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.Object)">
            <summary>
            Called by the HtmlFormat:IPlugin who checks to see if any registered view engines can handle the response DTO.
            If this view engine can handle the response DTO, then process it, otherwise, returning false will
            allow another view engine to attempt to process it. If no view engines can process the DTO,
            HtmlFormat will simply handle it itself.
            </summary>
        </member>
        <member name="T:ServiceStack.Razor.Managers.RazorViewManager">
            <summary>
            This view manager is responsible for keeping track of all the 
            available Razor views and states of Razor pages.
            </summary>
        </member>
        <member name="T:ServiceStack.Razor.AttributeValue">
            <summary>
            Class to represent attribute values and, more importantly, 
            decipher them from tuple madness slightly.
            </summary>
        </member>
    </members>
</doc>
